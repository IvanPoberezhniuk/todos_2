{"version":3,"sources":["components/toDos__footer.jsx","components/toDos__list.jsx","components/ToDos.jsx","App.js","index.js"],"names":["FILTER","ToDosFooter","_ref","completedTasks","filterTasks","clearCompleted","react_default","a","createElement","Fragment","className","onClick","ToDosList","data","toggleIsCompleted","removeTask","map","task","key","id","type","defaultChecked","isCompleted","randomstring","require","ToDos","state","actualData","inputValue","addTask","event","preventDefault","test","_this","setState","prevState","updateData","concat","Object","toConsumableArray","generate","index","findIndex","splice","filterBy","chosenFilter","filter","taskIndex","changeStateInputValue","target","value","localData","JSON","parse","window","localStorage","getItem","this","_this$state","addEventListener","setItem","stringify","placeholder","autoComplete","onChange","hidden","length","toDos_list","toDos_footer","Component","App","ToDos_ToDos","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ce69c796.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FILTER = {\r\n  active: 'active',\r\n  completed: 'completed'\r\n};\r\n\r\nlet ToDosFooter = ({ completedTasks, filterTasks, clearCompleted }) => {\r\n  return (\r\n    <>\r\n      <div className=\"toDos__footer\">\r\n        <div>{completedTasks} items left</div>\r\n        <div className=\"toDos__filter\">\r\n          <div onClick={filterTasks}>All</div>\r\n          <div onClick={() => filterTasks(FILTER.active)}>Active</div>\r\n          <div onClick={() => filterTasks(FILTER.completed)}>Completed</div>\r\n        </div>\r\n        <div onClick={clearCompleted} className=\"toDos__clearCompleted\">\r\n          Clear Completed\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDosFooter;\r\n","import React from 'react';\r\n\r\nlet ToDosList = ({ data, toggleIsCompleted, removeTask }) => {\r\n  return data.map(task => {\r\n    return (\r\n      <div className=\"toDos__dropDownTask\" key={task.id}>\r\n        <div>\r\n          <input\r\n            onClick={() => toggleIsCompleted(task.id)}\r\n            type=\"checkbox\"\r\n            className=\"toDos__toggle\"\r\n            defaultChecked={task.isCompleted}\r\n          />\r\n          <span className=\"toDos__task\">{task.task}</span>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"toDos__button-delete\"\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          x\r\n        </button>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default ToDosList;\r\n","import React, { Component } from 'react';\r\nimport ToDosFooter from './toDos__footer.jsx';\r\nimport ToDosList from './toDos__list.jsx';\r\nlet randomstring = require('randomstring');\r\n\r\nexport default class ToDos extends Component {\r\n  state = {\r\n    data: [],\r\n    actualData: [],\r\n    inputValue: ''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let localData = JSON.parse(window.localStorage.getItem('localData')) || [];\r\n\r\n    this.setState(prevState => ({\r\n      data: [...prevState.data, ...localData],\r\n      actualData: [...prevState.data, ...localData]\r\n    }));\r\n  }\r\n\r\n  addTask = event => {\r\n    event.preventDefault();\r\n\r\n    if (/^ *$/.test(this.state.inputValue)) {\r\n      return;\r\n    } else {\r\n      this.setState(prevState => {\r\n        let updateData = [\r\n          ...prevState.actualData,\r\n          {\r\n            task: prevState.inputValue,\r\n            isCompleted: false,\r\n            id: randomstring.generate(5)\r\n          }\r\n        ];\r\n\r\n        return {\r\n          data: updateData,\r\n          actualData: updateData,\r\n          inputValue: ''\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  removeTask = id => {\r\n    this.setState(prevState => {\r\n      let index = prevState.actualData.findIndex(task => task.id === id);\r\n      prevState.actualData.splice(index, 1);\r\n      return {\r\n        data: [...prevState.actualData]\r\n      };\r\n    });\r\n  };\r\n\r\n  filterTasks = filterBy => {\r\n    let chosenFilter = data => {\r\n      switch (filterBy) {\r\n        default:\r\n          return data;\r\n        case 'active':\r\n          return data.filter(task => !task.isCompleted);\r\n        case 'completed':\r\n          return data.filter(task => task.isCompleted);\r\n      }\r\n    };\r\n\r\n    this.setState(prevState => ({\r\n      data: chosenFilter(prevState.actualData)\r\n    }));\r\n  };\r\n\r\n  toggleIsCompleted = id => {\r\n    this.setState(prevState => {\r\n      let taskIndex = prevState.actualData.findIndex(task => task.id === id);\r\n\r\n      prevState.actualData[taskIndex].isCompleted = !prevState.actualData[\r\n        taskIndex\r\n      ].isCompleted;\r\n\r\n      return {\r\n        data: prevState.actualData\r\n      };\r\n    });\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    this.setState(prevState => {\r\n      prevState.actualData = prevState.actualData.filter(\r\n        task => task.isCompleted !== true\r\n      );\r\n      return {\r\n        data: prevState.actualData\r\n      };\r\n    });\r\n  };\r\n\r\n  changeStateInputValue = event => {\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, actualData } = this.state;\r\n\r\n    window.addEventListener('beforeunload', () =>\r\n      window.localStorage.setItem('localData', JSON.stringify(actualData))\r\n    );\r\n\r\n    return (\r\n      <div className=\"toDos__container\">\r\n        <h1 className=\"toDos__header\">todos</h1>\r\n        <form className=\"toDos\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"What need to be done?\"\r\n            className=\"input-base\"\r\n            autoComplete=\"off\"\r\n            onChange={this.changeStateInputValue}\r\n          />\r\n          <button type=\"submit\" onClick={this.addTask} hidden />\r\n\r\n          {!data.length ? (\r\n            false\r\n          ) : (\r\n            <ToDosList\r\n              data={data}\r\n              toggleIsCompleted={this.toggleIsCompleted}\r\n              removeTask={this.removeTask}\r\n            />\r\n          )}\r\n          <ToDosFooter\r\n            filterTasks={this.filterTasks}\r\n            clearCompleted={this.clearCompleted}\r\n            completedTasks={\r\n              data.filter(task => task.isCompleted !== true).length\r\n            }\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport ToDos from \"./components/ToDos\";\nimport \"./App.css\";\n\n// let toDoData = (window.localStorage.toDoData = []);\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <ToDos />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}