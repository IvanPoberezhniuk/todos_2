{"version":3,"sources":["components/toDos--footer.jsx","components/toDos--list.jsx","components/ToDos.jsx","App.js","index.js"],"names":["FILTER","ToDosFooter","props","react_default","a","createElement","Fragment","className","completedTasks","onClick","filterTasks","clearCompleted","ToDosList","data","map","task","key","id","toggleIsCompleted","type","defaultChecked","isCompleted","removeTask","randomstring","require","localData","ToDos","state","inputValue","addTask","event","preventDefault","test","_this","concat","Object","toConsumableArray","generate","setState","index","findIndex","splice","filterBy","filter","chosenFilter","prevState","taskIndex","changeStateInputValue","target","value","JSON","parse","window","localStorage","getItem","this","_this2","addEventListener","setItem","stringify","placeholder","autoComplete","onChange","hidden","length","toDos_list","toDos_footer","Component","App","ToDos_ToDos","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8e38cb06.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FILTER = {\r\n  active: \"active\",\r\n  completed: \"completed\"\r\n};\r\n\r\nlet ToDosFooter = props => {\r\n  return (\r\n    <>\r\n      <div className=\"toDos__footer\">\r\n        <div>\r\n          {props.completedTasks}{\" \"}\r\n          items left\r\n        </div>\r\n        <div className=\"toDos__filter\">\r\n          <div onClick={() => props.filterTasks()}>All</div>\r\n          <div onClick={() => props.filterTasks(FILTER.active)}>Active</div>\r\n          <div onClick={() => props.filterTasks(FILTER.completed)}>\r\n            Completed\r\n          </div>\r\n        </div>\r\n        <div\r\n          onClick={() => props.clearCompleted()}\r\n          className=\"toDos__clearCompleted\"\r\n        >\r\n          Clear Completed\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDosFooter;\r\n","import React from \"react\";\r\n\r\nlet ToDosList = props => {\r\n  return props.data.map(task => {\r\n    return (\r\n      <div className=\"toDos__dropDownTask\" key={task.id}>\r\n        <div>\r\n          <input\r\n            onClick={() => props.toggleIsCompleted(task.id)}\r\n            type=\"checkbox\"\r\n            className=\"toDos__toggle\"\r\n            defaultChecked={task.isCompleted}\r\n          />\r\n          <span className=\"toDos__task\">{task.task}</span>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"toDos__button-delete\"\r\n          onClick={() => props.removeTask(task.id)}\r\n        >\r\n          x\r\n        </button>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default ToDosList;\r\n","import React, { Component } from \"react\";\r\nimport ToDosFooter from \"./toDos--footer.jsx\";\r\nimport ToDosList from \"./toDos--list.jsx\";\r\nlet randomstring = require(\"randomstring\");\r\n\r\nlet localData = [];\r\n\r\nexport default class ToDos extends Component {\r\n  state = {\r\n    data: [],\r\n    inputValue: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    localData = JSON.parse(window.localStorage.getItem(\"localData\")) || [];\r\n\r\n    this.setState(prevState => ({\r\n      data: [...prevState.data, ...localData]\r\n    }));\r\n  }\r\n\r\n  addTask = event => {\r\n    event.preventDefault();\r\n\r\n    if (/^ *$/.test(this.state.inputValue)) {\r\n      return;\r\n    } else {\r\n      localData = [\r\n        ...localData,\r\n        {\r\n          task: this.state.inputValue,\r\n          isCompleted: false,\r\n          id: randomstring.generate(5)\r\n        }\r\n      ];\r\n\r\n      this.setState({\r\n        data: localData,\r\n        inputValue: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  removeTask = id => {\r\n    let index = localData.findIndex(task => task.id === id);\r\n    localData.splice(index, 1);\r\n\r\n    this.setState({\r\n      data: localData\r\n    });\r\n  };\r\n\r\n  filterTasks = filterBy => {\r\n    let chosenFilter = data => {\r\n      switch (filterBy) {\r\n        default:\r\n          return data;\r\n        case \"active\":\r\n          return data.filter(task => !task.isCompleted);\r\n        case \"completed\":\r\n          return data.filter(task => task.isCompleted);\r\n      }\r\n    };\r\n\r\n    this.setState({\r\n      data: chosenFilter(localData)\r\n    });\r\n  };\r\n\r\n  toggleIsCompleted = id => {\r\n    this.setState(prevState => {\r\n      let taskIndex = localData.findIndex(task => task.id === id);\r\n\r\n      localData[taskIndex].isCompleted = !localData[taskIndex].isCompleted;\r\n\r\n      return {\r\n        data: localData\r\n      };\r\n    });\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    localData = localData.filter(task => task.isCompleted !== true);\r\n\r\n    this.setState({\r\n      data: localData\r\n    });\r\n  };\r\n\r\n  changeStateInputValue = event => {\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    window.addEventListener(\"beforeunload\", () =>\r\n      window.localStorage.setItem(\"localData\", JSON.stringify(localData))\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"toDos__header\">todos</h1>\r\n        <form className=\"toDos\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"What need to be done?\"\r\n            className=\"input-base\"\r\n            autoComplete=\"off\"\r\n            value={this.state.inputValue}\r\n            onChange={event => this.changeStateInputValue(event)}\r\n          />\r\n          <button type=\"submit\" onClick={event => this.addTask(event)} hidden />\r\n\r\n          {!this.state.data.length ? (\r\n            false\r\n          ) : (\r\n            <ToDosList\r\n              data={this.state.data}\r\n              toggleIsCompleted={this.toggleIsCompleted}\r\n              removeTask={this.removeTask}\r\n            />\r\n          )}\r\n          <ToDosFooter\r\n            filterTasks={this.filterTasks}\r\n            clearCompleted={this.clearCompleted}\r\n            completedTasks={\r\n              this.state.data.filter(task => task.isCompleted === true).length\r\n            }\r\n          />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport ToDos from \"./components/ToDos\";\nimport \"./App.css\";\n\n// let toDoData = (window.localStorage.toDoData = []);\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <ToDos />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}