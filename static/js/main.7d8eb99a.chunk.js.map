{"version":3,"sources":["components/ToDos.jsx","App.js","serviceWorker.js","index.js"],"names":["toDoData","task","isComplete","ToDos","state","data","addTask","event","key","newTaskName","target","value","concat","Object","toConsumableArray","_this","setState","removeTask","preventDefault","dataTask","getAttribute","index","findIndex","splice","filterTasks","newData","arguments","length","undefined","filter","toggleIsComplete","dataValue","clearCompleted","editTask","map","_this2","this","react_default","a","createElement","action","className","autoComplete","type","name","placeholder","onKeyPress","autocomplete","onClick","data-task","defaultChecked","Component","App","Fragment","ToDos_ToDos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEIA,EAAW,CACb,CAAEC,KAAM,UAAWC,YAAY,GAC/B,CAAED,KAAM,UAAWC,YAAY,GAC/B,CAAED,KAAM,UAAWC,YAAY,GAC/B,CAAED,KAAM,UAAWC,YAAY,IAGZC,6MACnBC,MAAQ,CACNC,KAAML,KAGRM,QAAU,SAAAC,GACR,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAIC,EAAcF,EAAMG,OAAOC,MAC/BX,EAAQ,GAAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAOb,GAAP,CAAiB,CAAEC,KAAMQ,EAAaP,YAAY,KAE1Da,EAAKC,SAAS,CACZX,KAAML,QAKZiB,WAAa,SAAAV,GACXA,EAAMW,iBAEN,IAAIC,EAAWZ,EAAMG,OAAOU,aAAa,aACrCC,EAAQrB,EAASsB,UAAU,SAAArB,GAAI,OAAIA,EAAKA,OAASkB,IAErDnB,EAASuB,OAAOF,EAAO,GAEvBN,EAAKC,SAAS,CACZX,KAAML,OAMVwB,YAAc,WAAuB,IAC/BC,EADSvB,EAAsBwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAIrBD,EADU,OAAfvB,EACeF,EACAA,EAAS6B,OAAO,SAAA5B,GAAI,OAAIA,EAAKC,aAAeA,IAE3Da,EAAKC,SAAS,CACZX,KAAMoB,OAIVK,iBAAmB,SAAAvB,GACjB,IAAIwB,EAAYxB,EAAMG,OAAOU,aAAa,aACtCC,EAAQrB,EAASsB,UAAU,SAAArB,GAAI,OAAIA,EAAKA,OAAS8B,IAErD/B,EAASqB,GAAOnB,YAAcF,EAASqB,GAAOnB,WAE9Ca,EAAKC,SAAS,CACZX,KAAML,OAIVgC,eAAiB,WACfhC,EAAWA,EAAS6B,OAAO,SAAA5B,GAAI,OAAwB,IAApBA,EAAKC,aAExCa,EAAKC,SAAS,CACZX,KAAML,OAIViC,SAAW,SAAA1B,GACT,IAAIwB,EAAYxB,EAAMG,OAAOU,aAAa,aACtCT,EAAQJ,EAAMG,OAAOC,MACrBc,EAAUzB,EAASkC,IAAI,SAAAjC,GAAI,OAC7BA,EAAKA,OAAS8B,EAAa9B,EAAKA,KAAOU,EAASV,IAGlDc,EAAKC,SAAS,CACZX,KAAMoB,6EAID,IAAAU,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,OAAO,GAAGC,UAAU,QAAQC,aAAa,OAC5CL,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,KAAK,QACLC,YAAY,wBACZJ,UAAU,aACVK,WAAYV,KAAK9B,QACjByC,aAAa,QAEdX,KAAKhC,MAAMC,KAAK6B,IAAI,SAACjC,EAAMoB,GAC1B,OACEgB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAsBjC,IAAKP,EAAKA,KAAOoB,GACpDgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACES,QAAS,SAAAzC,GAAK,OAAI4B,EAAKL,iBAAiBvB,IACxCoC,KAAK,WACLM,YAAWhD,EAAKA,KAChBwC,UAAU,gBACVS,eAAgBjD,EAAKC,aASvBmC,EAAAC,EAAAC,cAAA,QAAMU,YAAWhD,EAAKA,KAAMwC,UAAU,eACnCxC,EAAKA,OAGVoC,EAAAC,EAAAC,cAAA,UACEE,UAAU,uBACVO,QAAS,SAAAzC,GAAK,OAAI4B,EAAKlB,WAAWV,IAClC0C,YAAWhD,EAAKA,MAHlB,QAUNoC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,WAAMH,KAAKhC,MAAMC,KAAKsB,OAAtB,eACAU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMb,EAAKX,gBAAzB,OACAa,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMb,EAAKX,aAAY,KAArC,UACAa,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMb,EAAKX,aAAY,KAArC,cAEFa,EAAAC,EAAAC,cAAA,OACES,QAAS,kBAAMb,EAAKH,kBACpBS,UAAU,yBAFZ,4BA5HyBU,aCQpBC,0LATX,OACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAd,SACAJ,EAAAC,EAAAC,cAACe,EAAD,cALUH,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d8eb99a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nlet toDoData = [\r\n  { task: \"Learn 1\", isComplete: false },\r\n  { task: \"Learn 2\", isComplete: true },\r\n  { task: \"Learn 3\", isComplete: true },\r\n  { task: \"Learn 4\", isComplete: false }\r\n];\r\n\r\nexport default class ToDos extends Component {\r\n  state = {\r\n    data: toDoData\r\n  };\r\n\r\n  addTask = event => {\r\n    if (event.key === \"Enter\") {\r\n      let newTaskName = event.target.value;\r\n      toDoData = [...toDoData, { task: newTaskName, isComplete: false }];\r\n\r\n      this.setState({\r\n        data: toDoData\r\n      });\r\n    }\r\n  };\r\n\r\n  removeTask = event => {\r\n    event.preventDefault();\r\n\r\n    let dataTask = event.target.getAttribute(\"data-task\");\r\n    let index = toDoData.findIndex(task => task.task === dataTask);\r\n\r\n    toDoData.splice(index, 1);\r\n\r\n    this.setState({\r\n      data: toDoData\r\n    });\r\n  };\r\n\r\n  com;\r\n\r\n  filterTasks = (isComplete = null) => {\r\n    let newData;\r\n\r\n    isComplete === null\r\n      ? (newData = toDoData)\r\n      : (newData = toDoData.filter(task => task.isComplete !== isComplete));\r\n\r\n    this.setState({\r\n      data: newData\r\n    });\r\n  };\r\n\r\n  toggleIsComplete = event => {\r\n    let dataValue = event.target.getAttribute(\"data-task\");\r\n    let index = toDoData.findIndex(task => task.task === dataValue);\r\n\r\n    toDoData[index].isComplete = !toDoData[index].isComplete;\r\n\r\n    this.setState({\r\n      data: toDoData\r\n    });\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    toDoData = toDoData.filter(task => task.isComplete !== true);\r\n\r\n    this.setState({\r\n      data: toDoData\r\n    });\r\n  };\r\n\r\n  editTask = event => {\r\n    let dataValue = event.target.getAttribute(\"data-task\");\r\n    let value = event.target.value;\r\n    let newData = toDoData.map(task =>\r\n      task.task === dataValue ? (task.task = value) : task\r\n    );\r\n\r\n    this.setState({\r\n      data: newData\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div action=\"\" className=\"toDos\" autoComplete=\"off\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"toDos\"\r\n          placeholder=\"What need to be done?\"\r\n          className=\"input-base\"\r\n          onKeyPress={this.addTask}\r\n          autocomplete=\"off\"\r\n        />\r\n        {this.state.data.map((task, index) => {\r\n          return (\r\n            <div className=\"toDos--dropDownTask\" key={task.task + index}>\r\n              <div>\r\n                <input\r\n                  onClick={event => this.toggleIsComplete(event)}\r\n                  type=\"checkbox\"\r\n                  data-task={task.task}\r\n                  className=\"toDos--toggle\"\r\n                  defaultChecked={task.isComplete}\r\n                />\r\n                {/* <input\r\n                  onChange={event => this.editTask(event)}\r\n                  type=\"text\"\r\n                  data-task={task.task}\r\n                  className=\"toDos--task\"\r\n                  defaultValue={task.task}\r\n                /> */}\r\n                <span data-task={task.task} className=\"toDos--task\">\r\n                  {task.task}\r\n                </span>\r\n              </div>\r\n              <button\r\n                className=\"toDos--button-delete\"\r\n                onClick={event => this.removeTask(event)}\r\n                data-task={task.task}\r\n              >\r\n                x\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n        <div className=\"toDos--footer\">\r\n          <div>{this.state.data.length} items left</div>\r\n          <div className=\"toDos--filter\">\r\n            <div onClick={() => this.filterTasks()}>All</div>\r\n            <div onClick={() => this.filterTasks(true)}>Active</div>\r\n            <div onClick={() => this.filterTasks(false)}>Completed</div>\r\n          </div>\r\n          <div\r\n            onClick={() => this.clearCompleted()}\r\n            className=\"toDos--clearCompleted\"\r\n          >\r\n            Clear Completed\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport ToDos from \"./components/ToDos\";\nimport \"./App.css\";\n\n// let toDoData = (window.localStorage.toDoData = []);\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h1 className=\"toDos-header\">todos</h1>\n        <ToDos />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}